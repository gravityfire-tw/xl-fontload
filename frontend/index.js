// Generated by LiveScript 1.3.1
var xfl;
xfl = {
  fonts: {},
  load: function(path, options, callback){
    var xhr, name, ref$, cb, that, slug, this$ = this;
    options == null && (options = {});
    if (!path) {
      return;
    }
    xhr = new XMLHttpRequest();
    path = path.replace(/\/$/, '');
    name = options.fontName || (ref$ = path.split("/").filter(function(it){
      return it;
    }))[ref$.length - 1];
    cb = typeof options === 'function' ? options : callback;
    if (that = this.fonts[path]) {
      return cb(that);
    }
    slug = options.fontName || Math.random().toString(16).substring(2);
    this.fonts[path] = {
      name: name,
      path: path,
      className: "font-" + slug,
      hit: {},
      url: {}
    };
    this.fonts[path].ajax = function(idxlist, cb){
      var check, this$ = this;
      check = function(){
        if (idxlist.map(function(it){
          return this$.url[it];
        }).filter(function(it){
          return it;
        }).length === idxlist.length) {
          return cb();
        }
      };
      return idxlist.map(function(d, i){
        var xhr;
        if (this$.url[d]) {
          return check();
        }
        xhr = new XMLHttpRequest();
        xhr.addEventListener('readystatechange', function(){
          if (xhr.readyState !== 4) {
            return;
          }
          this$.url[d] = URL.createObjectURL(xhr.response);
          return check();
        });
        xhr.open('GET', path + "/" + d + ".ttf");
        xhr.responseType = 'blob';
        return xhr.send();
      });
    };
    this.fonts[path].sync = function(txt){
      var hash, i$, to$, i, code, setIdx, k, this$ = this;
      hash = {};
      for (i$ = 0, to$ = txt.length; i$ < to$; ++i$) {
        i = i$;
        code = txt.charCodeAt(i);
        setIdx = this.codeToSet[code.toString(16)];
        if (!setIdx) {
          console.log("missing char: ", txt[i]);
        } else if (!this.hit[setIdx]) {
          this.hit[setIdx] = true;
          hash[setIdx] = true;
        }
      }
      return this.ajax((function(){
        var results$ = [];
        for (k in this.hit) {
          results$.push(k);
        }
        return results$;
      }.call(this)), function(){
        var css, idxlist, res$, k, i$, len$, idx, url, v, node;
        css = "";
        res$ = [];
        for (k in this$.hit) {
          res$.push(k);
        }
        idxlist = res$;
        for (i$ = 0, len$ = idxlist.length; i$ < len$; ++i$) {
          idx = idxlist[i$];
          url = this$.url[idx] || path + "/" + idx + ".woff2";
          css += "@font-face {\n  font-family: " + name + "-" + idx + ";\n  src: url(" + url + ") format('woff2');\n}";
        }
        idxlist = idxlist.map(function(it){
          return name + "-" + it;
        }).join(',');
        css += "." + this$.className + " { font-family: " + idxlist + "; }";
        this$.css = css;
        css = (function(){
          var ref$, results$ = [];
          for (k in ref$ = xfl.fonts) {
            v = ref$[k];
            results$.push(v.css || '');
          }
          return results$;
        }()).join('\n');
        node = xfl.node || document.createElement("style");
        node.textContent = css;
        if (xfl.node) {
          return;
        }
        node.setAttribute('type', 'text/css');
        document.body.appendChild(node);
        return xfl.node = node;
      });
    };
    xhr.addEventListener('readystatechange', function(){
      var hash;
      if (xhr.readyState !== 4) {
        return;
      }
      hash = {};
      xhr.responseText.split('\n').map(function(d, i){
        return d.split(' ').map(function(e, j){
          return hash[e] = i + 1;
        });
      });
      this$.fonts[path].codeToSet = hash;
      if (cb) {
        return cb(this$.fonts[path]);
      }
    });
    xhr.open('GET', path + "/charmap.txt");
    return xhr.send();
  }
};